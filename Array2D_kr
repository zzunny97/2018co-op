# Array2D

C와 Objective-C에서는 다음 줄을 쓸 수있다.

  int cookies[9][7];
  
쿠키를 9x7 그리드로 만듭니다. 63 개의 요소로 구성된 2 차원 배열이 만들어집니다. 3 열과 6 열의 쿠키를 찾으려면 다음과 같이 작성할 수 있습니다.

  myCookie = cookies[3][6];
  
이 구문은 Swift에서 허용되지 않습니다. Swift에서 다차원 배열을 만들려면 다음과 같이 작성할 수 있습니다.

```swift
var cookies = [[Int]]()
for _ in 1...9 {
  var row = [Int]()
  for _ in 1...7 {
    row.append(0)
  }
  cookies.append(row)
}
```

그런 다음 쿠키를 찾으려면 다음과 같이 작성할 수 있습니다.

```swift
let myCookie = cookies[3][6]
```

한 줄의 코드로 배열을 만들 수도 있습니다.

```swift
var cookies = [[Int]](repeating: [Int](repeating: 0, count: 7), count: 9)
```

이것은 복잡해 보이지만 도우미 기능으로 단순화 할 수 있습니다.

```swift
func dim<T>(_ count: Int, _ value: T) -> [T] {
  return [T](repeating: value, count: count)
}
```

그런 다음 배열을 만들 수 있습니다.

```swift
var cookies = dim(9, dim(7, 0))
```

Swift는 배열 요소의 기본값으로`0`을 지정했기 때문에 배열의 데이터 유형이`Int`이어야한다고 추측합니다. 대신 문자열을 사용하려면 다음과 같이 작성할 수 있습니다.

```swift
var cookies = dim(9, dim(7, "yum"))
```

`dim ()`함수는 더 많은 차원으로 쉽게 갈 수있게합니다 :

```swift
var threeDimensions = dim(2, dim(3, dim(4, 0)))
```

이런 식으로 다차원 배열이나 여러 중첩 배열을 사용하는 단점은 차원이 무엇을 나타내는 지 추적하지 못하게하는 것입니다.

대신, 사용하기에 더 편한 2D 배열처럼 작동하는 고유 한 형식을 만들 수 있습니다.

```swift
public struct Array2D<T> {
  public let columns: Int
  public let rows: Int
  fileprivate var array: [T]
  
  public init(columns: Int, rows: Int, initialValue: T) {
    self.columns = columns
    self.rows = rows
    array = .init(repeating: initialValue, count: rows*columns)
  }
  
  public subscript(column: Int, row: Int) -> T {
    get {
      precondition(column < columns, "Column \(column) Index is out of range. Array<T>(columns: \(columns), rows:\(rows))")
      precondition(row < rows, "Row \(row) Index is out of range. Array<T>(columns: \(columns), rows:\(rows))")
      return array[row*columns + column]
    }
    set {
      precondition(column < columns, "Column \(column) Index is out of range. Array<T>(columns: \(columns), rows:\(rows))")
      precondition(row < rows, "Row \(row) Index is out of range. Array<T>(columns: \(columns), rows:\(rows))")
      array[row*columns + column] = newValue
    }
  }
}
```

`Array2D`는 제네릭 타입이므로 숫자가 아닌 모든 종류의 객체를 저장할 수 있습니다.

`Array2D` 인스턴스를 만들려면 다음과 같이 작성할 수 있습니다 :

```swift
var cookies = Array2D(columns: 9, rows: 7, initialValue: 0)
```

`subscript` 함수를 사용하면 배열에서 객체를 검색 할 수 있습니다 :

```swift
let myCookie = cookies[column, row]
```

또는 변경할 수 있습니다.

```swift
cookies[column, row] = newCookie
```

내부적으로,`Array2D`는 하나의 1 차원 배열을 사용하여 데이터를 저장합니다. 해당 배열에있는 객체의 색인은`(row x numberOfColumns) + column`에 의해 주어 지지만`Array2D`의 사용자는 "column"과 "row"에 대해서 생각하면됩니다. Array2D에 의해 행해집니다. 이것은 기본 유형을 랩퍼 클래스 또는 구조로 래핑하는 이점입니다.

* Matthijs Hollemans의 Swift Algorithm Club 작성 *
