# 피즈 버즈

피즈 버즈는 아이들이 나누기에 대해 가르쳐주는 그룹 단어 게임입니다. 플레이어는 3을 나누는 숫자를 "fizz"단어로 바꾸고 "buzz"라는 단어로 5로 나눌 수있는 숫자를 점차적으로 계산합니다.

피즈 버즈는 컴퓨터 프로그래머를위한 면접 심사 장치로 사용되었습니다.


## 예

일반적인 피즈 버즈 :

`1`, `2`, `Fizz`, `4`, `Buzz`, `Fizz`, `7`, `8`, `Fizz`, `Buzz`, `11`, `Fizz`, `13`, `14`, `Fizz Buzz`, `16`, `17`, `Fizz`, `19`, `Buzz`, `Fizz`, `22`, `23`, `Fizz`, `Buzz`, `26`, `Fizz`, `28`, `29`, `Fizz Buzz`, `31`, `32`, `Fizz`, `34`, `Buzz`, `Fizz`, ...

## 	모듈러스 연산자

모듈러스 연산자 '%'는 피즈 버즈를 푸는 열쇠입니다.

모듈러스 연산자는 정수 나누기 후에 나머지를 반환합니다. 모듈러스 연산자의 예는 다음과 같습니다.

| 나눗셈      | 나눗셈 결과            | 모듈러스         | 모듈러스 결과  |
| ------------- | -------------------------- | --------------- | ---------------:|
| 1 / 3       | 0 과 나머지는 3  | 1 % 3         | 1             |
| 5 / 3       | 1 과 나머지는 2  | 5 % 3         | 2             |
| 16 / 3      | 5 과 나머지는 1  | 16 % 3        | 1             |

숫자가 짝수인지 홀수인지를 결정하는 일반적인 접근법은 모듈러스 연산자를 사용하는 것입니다.

| 모듈러스       | 결과          | 스위프트 코드                      | 스위프트 코드 결과 | 주석                                           |
| ------------- | ---------------:| ------------------------------- | -----------------:| --------------------------------------------- |
| 6 % 2       | 0               | `let isEven = (number % 2 == 0)`  | `참`            | 2로 나눌 수있는 경우 * even *    |
| 5 % 2       | 1               | `let isOdd = (number % 2 != 0)`   | `참`            | 2로 나눌 수없는 경우 * 홀수 * |

## 피즈 버즈 해결하기

이제 모듈러스 연산자`%`를 사용하여 피즈 버즈를 풀 수 있습니다.

3으로 나눌 수있는 숫자 찾기 :

| 모듈러스 | 모듈러스 결과 | 스위프트 코드    | 스위프트 코드 결과 |
| ------- | --------------:| ------------- |------------------:|
| 1 % 3 | 1            | `1 % 3 == 0`  | `false`           |
| 2 % 3 | 2            | `2 % 3 == 0`  | `false`           |
| 3 % 3 | 0            | `3 % 3 == 0`  | `true`            |
| 4 % 3 | 1            | `4 % 3 == 0`  | `false`           |

5로 나눌 수있는 숫자 찾기 :

| 모듈러스 | 모듈러스 결과 | 스위프트 코드    | 스위프트 코드 결과 |
| ------- | --------------:| ------------- |------------------:|
| 1 % 5 | 1            | `1 % 5 == 0`  | `false`           |
| 2 % 5 | 2            | `2 % 5 == 0`  | `false`           |
| 3 % 5 | 3            | `3 % 5 == 0`  | `false`           |
| 4 % 5 | 4            | `4 % 5 == 0`  | `false`           |
| 5 % 5 | 0            | `5 % 5 == 0`  | `true`            |
| 6 % 5 | 1            | `6 % 5 == 0`  | `false`           |

## 코드

Swift에서의 간단한 구현은 다음과 같습니다.

```swift
func fizzBuzz(_ numberOfTurns: Int) {
  for i in 1...numberOfTurns {
    var result = ""

    if i % 3 == 0 {
      result += "Fizz"
    }

    if i % 5 == 0 {
      result += (result.isEmpty ? "" : " ") + "Buzz"
    }

    if result.isEmpty {
      result += "\(i)"
    }

    print(result)
  }
}
```

이 코드를 놀이터에 놓고 다음과 같이 테스트하십시오.

```swift
fizzBuzz(15)
```

그러면 다음과 같이 출력됩니다.

	1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, Fizz Buzz

## 참고 사항

[위키 백과의 피즈 버즈] (https://en.wikipedia.org/wiki/Fizz_buzz)

* [Chris Pilcher] (https://github.com/chris-pilcher) 글 *
